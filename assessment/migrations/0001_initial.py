# Generated by Django 2.0.6 on 2018-08-01 07:48

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('course', '0001_initial'),
        ('faculty', '0001_initial'),
        ('student', '0001_initial'),
        ('program', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('Int', 'Internal'), ('M', 'Main')], default='', max_length=10)),
                ('start_date', models.DateField(default=datetime.date.today)),
                ('duration', models.DurationField()),
                ('year', models.PositiveSmallIntegerField()),
                ('assessment_completed', models.BooleanField(default=False)),
                ('result_completed', models.BooleanField(default=False)),
                ('course', models.ForeignKey(on_delete=None, to='course.Course')),
                ('faculty', models.ForeignKey(on_delete=None, to='faculty.Faculty')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(choices=[('Remember', 'Remember'), ('Understand', 'Understand'), ('Apply', 'Apply'), ('Analyze', 'Analyze'), ('Evaluate', 'Evaluate'), ('CD', 'Create/Design')], default='', max_length=10)),
                ('text', models.TextField()),
                ('max_marks', models.PositiveSmallIntegerField()),
                ('question_order', models.PositiveSmallIntegerField()),
                ('marking_scheme', models.TextField()),
                ('assessment', models.ForeignKey(on_delete=None, to='assessment.Assessment')),
                ('outcome', models.ManyToManyField(to='course.CourseOutcome')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obtained_marks', models.IntegerField(blank=True, null=True)),
                ('question', models.ForeignKey(on_delete=None, to='assessment.AssessmentQuestion')),
                ('student', models.ForeignKey(on_delete=None, to='student.Student')),
            ],
            options={
                'permissions': {('can_view_result', 'can view result')},
            },
        ),
        migrations.CreateModel(
            name='AttainmentAL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attainment_per', models.FloatField()),
                ('assessment_id', models.ForeignKey(on_delete=None, to='assessment.Assessment')),
                ('co_id', models.ForeignKey(on_delete=None, to='course.CourseOutcome')),
            ],
        ),
        migrations.CreateModel(
            name='AttainmentCL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField()),
                ('attainment', models.FloatField()),
                ('co_id', models.ForeignKey(on_delete=None, to='course.CourseOutcome')),
            ],
        ),
        migrations.CreateModel(
            name='AttainmentPL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField()),
                ('attainment', models.FloatField()),
                ('po_id', models.ForeignKey(on_delete=None, to='program.ProgramOutcome')),
                ('program', models.ForeignKey(on_delete=None, to='program.Program')),
            ],
        ),
    ]
